Shelf-broker scheduling with message broker, probably rabbitmq
                                        RBLandau 20180616

Today, an actor script is a shell script that is processed by a single shell process, one per available CPU (core).  The script goes thru half a dozen steps with timing loops in the middle to ensure that each step is complete before proceeding to the next one.  

Here's the first idea.  This could be done in a sort of Linda-ish fashion using a message broker with some scheduling capabilities, e.g., queue all the steps, each with a unique id, each dependent on the previous one, so that each step is held until the blocking id of the previous step is asserted.  

Unfortunately, RabbitMQ, at least, is not capable of holding messages coinditionally in that fashion.  One could build the scheduler externally and have it requeue messages when they are unblocked.  Not good, not a clean design, and generating a lot of excess message traffic.  

[I wonder if the RabbitMQ commmunity or developers would be open to such an idea.  I don't think I could add it myself; I don't feel like learning Erlang.]

Here's the second idea.  Put the steps from the current script into a list of steps in data structures, where each step forwards the message to a queue specified in the step data with parameters also in the step data.  When a step processor completes, it adds its exit status and timestamp to the done vector in the message and forwards the message to the next queue in line.  (The done vector just grows until all steps have been completed, so it's sort of semi-stateless.)

Well, maybe an oops; can a consumer also produce messages?  Probably yes.  Consumers have to register, but I don't think producers have to.  

The step processor will have to be a small program that receives the message and launches the requested program in a subshell.


message:
    for each step:
        step number, 
        processname (=queue name?),
        command line to run step
        ...
    progress vector:
        step done, timestarted, timeended, status
        ...
    params:
        dunno what else goes here


message: dict
    steps: list
        step: dict
            number
            process name
            queue name
            command line
        ...
    progress: list
        stepdone: dict
            number
            status
            start time
            end time
        ....
    params: dict
        ...

