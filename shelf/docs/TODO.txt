TODO


extractvalues.py
DONE - add optional arg for --separator=','
DONE - default should still be space
- if i use comma, then datacleanup can use DictReader.  not a big deal.
- actually, Dialect.delimiter can be set to whatever i want.
- maybe just use reader with delimiter=' ' and dict(zip()) 
   the header list and data list together.  
DONE - recode entirely to force filter first thing, to reduce the size
    of the internal lists required, and speed things up.  

   
100% glitch impact
DONE - shelf destroy all documents on shelf.
DONE - server inform client of shelf failure.
DONE - server refuse document additions to that shelf, 
  or maybe shelf just always answers that it's full.
WRONG - server probably should refuse to make a new shelf.  
DONE - client go shopping for another server to replace dead one.
WRONG - if duration is short, then server may recover before the
  client even notices; however, all documents still have been lost,
  so the next audit will find many dead docs.  
  
brokercommands
DONE - slow down after extractvalues, too.


broker.py
DONE - increase the stuck timer a lot.
- protect against grep failure, linux vs windows.
- add a cleanstart shell script to empty the dirs that need to 
  be empty, set a clean GiantOutput file, and rescue any data
  that was left over in a previous GiantOutput file into
  the done dir.  


newinstructions
- Add a squash function to reduce blank sequences to single blanks
  in flat files, in case someone created instructions in fixed columns.
DONE - write filter for instructions as they are being generated flat
  hierarchical: a field named action for permit/deny
- write rules for the filter
  rules in a list of json dictionaries
  first rule is permit *, then list of denies maybe slightly countermanded
- integrate into last stage of flat instruction generation

newnewinstructions
- custom flat db or maybe tiny or buzhug
- facade or adapter: same interface as current mongolib
- new load, list, and clear utilities that use flatlib
- eventually, web app to generate smallish sets of instructions

packaging
DONE - do Docker basic tutorials
DONE - construct vm platforms for docker learning on both systems
- transcribe crummy bash script to dockerfile

Docker scheduling
- after container install, get sources from github
- after container install, run first simple test
- after container install, build tinytestdb
- after container install, start mongod
- after container install, run broker tests



AWS
DONE - deploy shelf on AWS free tier system
DONE - automate deployment to AWS systems
DONE - run shelf on free tier system
DONE - get access to 8 core system
DONE - deploy to 8 core system
DONE - run shelf on 8 core system
- deploy to 36 core system
- run on 36 core system: how fast?


nonmonotonicity testing
- do runs in the sensitive areas, limited to 3-4 lifetimes and few copies
- runs with 100 or more seeds?
- many runs with 20ish seeds to assess variability?
- jacknife the existing numbers?


outline for September presentation
- how long is it?
DONE - draft slide sequence
- get approval of slide sequence
- who is going to talk?
DONE - propose what pictures we need
- get list of specific graphs to be done

runs for September presentation
- what graphics needed?
- what numbers to compute?

rationalize time constants so that people can understand them
- change sector lifetime to half-life
  (this will change ALL the existing numbers; recompute everything)
DONE - change glitch frequency to half-life (oops, already is)



