TODO list for PreservationSimulation SHELF project


TODO: extractvalues.py
DONE - add optional arg for --separator=','
DONE - default should still be space
DONE - if i use comma, then datacleanup can use DictReader.  
    not a big deal.
DONE - actually, Dialect.delimiter can be set to whatever i want.
DONE - maybe just use reader with delimiter=' ' and dict(zip()) 
    the header list and data list together.  
DONE - recode entirely to force filter first thing, to reduce the size
    of the internal lists required, and speed things up.  
    dramatic improvement.  
DEFER - Is there some place here where memoizing can help further?
FIXME - Extract and include at the right end of the data the loss statistics for all individual servers.  Yes, this will make the total dataset potentially non-rectangular for high-failure cases where different numbers of servers may be used for different seeds, yikes, and therefore it will complicate some post-processing. 


TODO: 100% glitch impact
DONE - shelf destroy all documents on shelf.
DONE - server inform client of shelf failure.
DONE - server refuse document additions to that shelf, 
  or maybe shelf just always answers that it's full.
WRONG - server probably should refuse to make a new shelf.  
DONE - client go shopping for another server to replace dead one.
WRONG - if duration is short, then server may recover before the
  client even notices; however, all documents still have been lost,
  so the next audit will find many dead docs.  
DONE - BUG, NEEDS FIXING: when client provisions a new server, it must 
  check that at least one copy of a document still exists before
  putting a copy on the new server.  if a document is already lost
  on all servers, we can't invent a new copy for the new server.  
  this might be just a nit for most failures, but for 200% or 300% 
  correlated failures, this is a real concern.  
FIXME - QUESTION: when provisioning a new server to replace a failed one, 
  should the client mark the re-provisioning as majority or minority 
  repairs?
FIXME - optimize auditing: when it finds a dead server, don't bother checking 
  any more documents on that particular server, and don't attempt any
  repairs to that server.  should speed up auditing considerably.  


TODO: brokercommands
DONE - slow down after extractvalues, too.


TODO: broker.py
DONE - increase the stuck timer a lot.
DUNNO - protect against grep failure, linux vs windows.
FIXME - add a cleanstart shell script to empty the dirs that need to 
  be empty, set a clean GiantOutput file, and rescue any data
  that was left over in a previous GiantOutput file into
  the done dir.  
DONE - fix y/n switch options to get rid of the need for a value.
DONE - fix the broker invocation in the AWSinstallscript to match the
  revised y/n options.
FIXME - start the run count from 1 even for cases that have already been done, 
  so that the run number reflects progress toward the total number, and print 
  the run number in the already-done line.  
FIXME - log all broker commands into some file.
FIXME - add auditfreq and segs to the intro run-n lines.  
FIXME - make familydir and specificdir required options (fun oxymoron).


TODO: broker docs
FIXME - add examples of obscure mongodb syntax in the --query command (and others?) 
  to howto broker doc.
FIXME - Add a help file about using mongoshell to examine database of instructions, in case you think anything is funny about the database.  
MAYBE - add a script to dump out some sample stats from a mongo db, such as names of
  all dbs, number of elements and varnames for each, like that.  


TODO: audit
FIXME - log stats at end of each audit cycle: lost, minority repairs, majority repairs.  These are all cross-server figures.  We need to add per-server figures, too.
FIXME - log per-server total losses and hits at end of run.  


TODO: newinstructions
FIXME - Add a squash function to reduce blank sequences to single blanks
  in flat files, in case someone created instructions in fixed columns.
DONE - write filter for instructions as they are being generated flat
  hierarchical: a field named action for permit/deny
DONE - write rules for the filter
  rules in a list of json dictionaries
  first rule is permit *, then list of denies maybe slightly countermanded
DONE - rewrite rules to filter lots more, particularly nonsense cases
  with glitch freq, impact, decay, and life.  
DONE - integrate filter into last stage of flat instruction 
  generation
FIXME - write documentation on how to generate instructions flat file 
  and database.  
DONE - fix order of args to filter program, data file last.
DONE - fix shell script that makes complete instruction list to
  reflect change in argument order.


TODO: packaging into Docker
DONE - do Docker basic tutorials
DONE - construct vm platforms for docker learning on both systems
DONE - transcribe crummy bash script to dockerfile.
FIXME - write docker shim to feed instructions from outside to inside.
FIXME - add shim to docker image
FIXME - use docker logs to watch progress of log files


TODO: Docker scheduling
FIXME - after container install, get sources from github
FIXME - after container install, run first simple test
FIXME - after container install, build tinytestdb
FIXME - after container install, start mongod
FIXME - after container install, run broker tests


TODO: AWS deployment
DONE - deploy shelf on AWS free tier system.
DONE - automate deployment to AWS systems.
DONE - run shelf on free tier system.
DONE - get access to 8 core system.
DONE - deploy to 8 core system.
DONE - run shelf on 8 core system.
DONE - deploy to 32 core system c3.8xlarge.
DONE - run on 32 core system: how fast?
DONE - clean up and document the AWS-Ubuntu install script.
DONE - test docker deployment on 8 core system.
DONE - test docker deployment on 32 core system.
DONE - change newinstructions db to something smaller and more useful.
FIXME - change newinstructions section of script to create flat instructions 
  and database from the ins files pulled.  


TODO: rationalize time constants so that people can understand them
DONE - change main.py sector lifetime to half-life.
  (this will change ALL the existing numbers; recompute everything)
DONE - update the AWS install script single-run test for the new half-life 
  results.
DONE - change glitch frequency to half-life (oops, already is)
DONE - update the main.py CLI help to reflect half-life instead of lifetime.
DONE - update the main.py CLI to accept both --lifek and --lifem.  
DONE - update the broker.py CLI help to reflect half-life instead of lifetime.
FIXME - update other docs to reflect half-life instead of lifetime.  
WRONG - update main.py to accept either lifek or lifem but not both.
DONE - update main.py to accept both lifek and lifem, where lifek takes
  precedence because it is more accurate.  
DONE - BUG: fix main.py arg parsing to make all the positional params mandatory.  
  and bump the CLI version number.  
DONE - remove the requirement for a Y/N value from --shortlog.
FIXME - BUG: fix main.py default values in G so that is doesn't fail if there are
  no param files in the familydir or specificdir; always fails for the list
  items, such as ncopies, I think because the list items in the dictionaries
  should be one level deeper.  
FIXME - Update SERVERUSE log lines and some other lines, too, at end to state half-life and exponential lifetime with few or no decimal places.


TODO: calibration
FIXME: do spreadsheet of a0 numbers compared with simple Poisson theoretical results.  


TODO: log file reporting
FIXME - Include in log file output error numbers for each server individually, hits, losses, redundant hits.  To be used someday to assess the distribution of increased losses due to glitches.  


TODO: R reporting
FIXME - state tables both as loss numbers and as percentage losses of collection.


TODO: lifetimes: correlated institutional failures
FIXME - at some interval, economic glitch dramatically increases the 
  institutional 100% failure rate for >= 1 server.
  Note trickiness: this is cross-server, needs access to several
  server instances at once.
FIXME - add external parameters to set number of servers affected,
  the decrease in institution lifetime, and the rate of economic
  recession/depression.  


DEFER: web interface to select instructions for broker run
FIXME - learn kivy and remi, decide which to use.
FIXME - build static web interface to permit choosing instructions for 
  a single run, or subset instructions for group run.
FIXME - build backend for interface that generates broker.py command.


DEFER: newnewinstructions
FIXME - custom flat db or maybe tiny or buzhug
FIXME - facade or adapter: same interface as current mongolib
FIXME - new load, list, and clear utilities that use flatlib
FIXME - eventually, web app to generate smallish sets of instructions


DEFER: packaging
DONE - do Docker basic tutorials
DONE - construct vm platforms for docker learning on both systems
FIXME - transcribe crummy bash script to dockerfile


DEFER nonmonotonicity testing
FIXME - do runs in the sensitive areas, limited to 3-4 lifetimes and few copies
FIXME - runs with 100 or more seeds?
FIXME - many runs with 20ish seeds to assess variability?
FIXME - jacknife the existing numbers?


TODO: outline for September presentation
DONE - how long is it?
DONE - draft slide sequence
DONE - get approval of slide sequence
DONE - who is going to talk?
DONE - propose what pictures we need
DONE - get list of specific graphs to be done


TODO: runs for September presentation
DONE - what graphics needed?
DONE - what numbers to compute?


TODO: same for November presentation to iPRES at UNC
DONE - write slides for Micah to use, update from September's.









