TODO list for PreservationSimulation SHELF project


TODO: shock
DONE - increase number of servers available to 50 or 60.
DONE - sort end-audit server list for easier reading.  
DONE - add server default lifespan to param files and CLI, zero = infinite.
DONE - server default lifespan is random, not fixed.  currently expo.
DONE - add server default lifespan to main CLI and broker.
DONE - code shock methods for real not just pseudocode.  new style, at audit.
DONE - test shock rescheduling server death.  
WRONG - server death after shock is after now, not absolute, right?
DONE - shock reduces server life by pct. shock duration finite.  after shock
    expires, server life returns to normal if not already dead.  
DONE - do not restore life to server that has expired during the shock.  
DONE - select reasonable ranges of shock impacts.  
DONE - server death evaluated before every audit cycle and at end of run.  
DONE - watch out for server lifetime zero (=infinite) when assessing
        server live/dead at audit and end of run.  
DONE - when kill server, also kill shelf and all doc copies on it.  
DONE - add nRandomSeeds to GUI.
DONE - do a thorough testing and maybe even filecomp on RICKS9, after
    I accidentally deleted the entire repository and tried to re-clone it.  


TODO: instruction generation
DONE - BUG - actually put quotes around the value label fields to prevent
    future editing errors that insert a comma somewhere in the field.
DONE - add comments for users to value labels for fields in hours, e.g., 
    auditfreq: "0 (never)", "2500 (quarter)", "10000 (year)", etc.
DONE - new searchspace facility to generate cross-product instructions.
DONE - unittests for searchspace.
DONE - adapt broker to new instruction ifc.
DONOTDO - if shockfreq==0, should we coerce serverdefaultlifetime=0?
    not doing this got us into trouble once with servers expiring and losing
    all docs even when there were no shocks.  hmmm.  


TODO: status bookkeeping database
FIXME - move to SQLite instead of the current MongoDB.
DONE - add server default half-life, and any other vagrant parameters 
    you find lying about, to the hash for done-detection.  
DONE - write searchdb status database based on json files.
DONE - unittests for searchdb.
DONE - adapt broker to new done and progress ifcs.
DONE - adapt datacleanup to new done and progress ifcs.
DON'T - redo and make new utilities for progress and done collections:
    delete, count, list keys, list all.
DONE - nope, rewrite the status database, have to go back to Mongo; 
    file locking on Win10/Cygwin does not work well enough to prevent
    some corruption of the database's json file.  oh, crap.  
DONE - write searchdbmongo facility and unittest.
DONE - adapt broker to new mongo done and progress ifcs.
DONE - adapt datacleanup to new mongo done and progress ifcs.
DONE - redo and make new utilities for progress and done collections:
    delete, count, list keys, list all.
DONE - need new utils: list databases, list collections in db.  
    because the mongo console util is so, um, unwonderful.  


TODO: web interface to select instructions for broker run
FIXME - add option to initialize the family/specific dirs.  new page.  
FIXME - add option to clear the done collection.
DONE - add option for detached run with results to log file.
DONE - permit multiple-select for most options.  single select renders just 
    the simple value; multiselect renders json list in quotes '[1,2,3]'.
DONE - move some items around in the interface to fill in gaps left by
    multiselect.
DONE - add --redo option to form and command.
DONE - ensure that the python/bottle program always runs in a detachable
    subprocess, i.e., with >logfile 2>&1 &.
DONE - let web server read from any address so it can be controlled remotely.  
DONE - validate directories before launching broker.py.
DONOTDO - maybe add button for Production Mode.  broker runs should *always*
    be in production mode, so have the script set that.  
DONE - add startup shell script with easy name.  maybe that script sets
    production mode before starting?  maybe opt-out of production?
DONOTDO - learn kivy and remi, decide which to use.
DONE - build static web interface to permit choosing instructions for 
    a single run using bottle.
DONE - add server default halflife to web interface and CLI.
DONE - build static web interface to permit choosing subset instructions 
    for group run by broker.
DONE - build backend for interface that generates broker.py command.
DONE - fix the interface for new instruction values and revised interface 
    for broker CLI.
DONE - change shock (and maybe other) lists in GUI to match the instructions.  
DONE - generate the HTML from the instruction db.  not simple.  


TODO: newtrace
FIXME - write unit tests for all common cases.  
FIXME - update to run under python2 and python3.
DONE - make new ntrace, ntracef the default inner routines for efficiency.  
MAYBE - for trace level zero, do not check facility codes.
DONE - do null version of trace decorators for production use
    that do as little as possible.  trace consumes about 40% of CPU time
    during typical run.  make sure that level 0 traces always come out.
DONE - add routine to tell if production mode is on, so it can be logged.  


TODO: general
FIXME - update deadly out of date comments in, e.g., main.py.  check all 
    such modules.
FIXME - do we want to wrap this up as a python package?  not at all clear.
    given that it has to be installed on a linux, a zip with readmefirst and 
    instruction docs would be more suitable.  
FIXME - update all the python shebang strings to "#!/usr/bin/env python"
    like a good boy.  or maybe not: modules that are always imported and 
    never executed alone do not need the shebang.
DONOTDO - convert the entire corpus to python3?  no way.  
DONE - create brokercommandlog_enable.sh and ..._disable.sh files to 
    enable the user easily to turn broker command logging on and off.
    both should preserve any info already in the log.
DONE - stop accepting or rescheduling sector errors on dead shelf.  
DONE - at end, report servers that died and were in use at the time; 
  currently reports all servers that died, even if not used by client.  


TODO: extractvalues.py
FIXME - do not use the same lineregex more than once.  if a lineregex 
    has already been used on a line, hit or miss, don't bother asking again.  
DONE - add audittype field to output.  this may require changes
    to other modules as well, but I can't think why at the moment.
    probably change only the instruction file to add the
    two regexes and the augmented header line.
DONE - add optional arg for --separator=','
DONE - default should still be space
DONE - if i use comma, then datacleanup can use DictReader.  
    not a big deal.
DONE - actually, Dialect.delimiter can be set to whatever i want.
DONE - maybe just use reader with delimiter=' ' and dict(zip()) 
    the header list and data list together.  
DONE - recode entirely to force filter first thing, to reduce the size
    of the internal lists required, and speed things up.  
    dramatic improvement.  
DEFER - Is there some place here where memoizing can help further?
DONOTDO - Extract and include at the right end of the data the 
  loss statistics for all individual servers.  Yes, this will make 
  the total dataset potentially non-rectangular for high-failure 
  cases where different numbers of servers may be used for 
  different seeds, yikes, and therefore it will complicate some 
  post-processing. 
DONOTDO - add ability to store server-specific values for audit and 
  error stats.  Today, all the lines use the same error code and the 
  server id is in a data item.  Don't know how to store this in dict
  yet; either the item name or the value will have to be tuples, or both.
DONE - add commentary about how this should have been done with 
  awk in the first place; reproducing this trivial subset of awk
  in Python was not a good idea because it constantly needs
  functional extensions.
DONE - add new fields for shock and serverlife.
DONE - test with --shortlog.  may have to adjust logging and/or extract
    rules.  
DONE - add values to extract line: deadserversactive, maybe deadserversall.
DONE - also add /proc/cpuinfo vendor_id, cpu family, model, speed.
DONE - print extracted line to stdout, too, so it gets into actor log.
DONE - BUG - glitchdecay and glitchmaxlife not found for copies=1,2, and
    glitchfreq=0.  huh?
DONE - why did i ever remove glitchspan?  put it back.


TODO: R 
FIXME - add audittype to the list of don't-care columns.
FIXME - think about a way to rename the columns at the last instant, 
    just before they go into R processing, with the style of names
    suggested by Altman, e.g., i_foo for inputs and o_bar for outputs.
    maybe p for params and r for results?  
FIXME - learn what to do more simply, using Altman's style of R.
FIXME - for every table and picture, preserve the entire R code alongside
    the data.
DONE - can the ugly nested loop be restructured to run from a list of vars
    in the order we want them nested?
    done using plyr package, ddply function and arrange function.  wonderful.
FIXME - learn Pandas, which is supposed to be equivalent to the R data.frame
    data structure.  this might make it easier to do the nested loop in 
    a more easily maintainable way.  
FIXME - need new versions of table summary with glitch y/n and shock y/n.
    partially done.  
DONE - add serverdefaultlife to datn and arrangeable fields.


TODO: 100% glitch impact
DONE - shelf destroy all documents on shelf.
DONE - server inform client of shelf failure.
DONE - server refuse document additions to that shelf, 
  or maybe shelf just always answers that it's full.
WRONG - server probably should refuse to make a new shelf.  
DONE - client go shopping for another server to replace dead one.
WRONG - if duration is short, then server may recover before the
  client even notices; however, all documents still have been lost,
  so the next audit will find many dead docs.  
DONE - BUG, NEEDS FIXING: when client provisions a new server, it must 
  check that at least one copy of a document still exists before
  putting a copy on the new server.  if a document is already lost
  on all servers, we can't invent a new copy for the new server.  
  this might be just a nit for most failures, but for 200% or 300% 
  correlated failures, this is a real concern.  
FIXME - QUESTION: when provisioning a new server to replace a failed one, 
    should the client mark the re-provisioning as majority or minority 
    repairs?  resolution: state the problem and point future developers to 
    where they can correct the counters.  
DONE - optimize auditing: when it finds a dead server, don't bother checking 
  any more documents on that particular server, and don't attempt any
  repairs to that server.  should speed up auditing considerably.  


TODO: brokercommands
DONE - slow down after extractvalues, too.


TODO: broker.py
FIXME - ditch mongodb in favor of sqlite3.
FIXME - in listonly listings, sort the dictionary dump.
FIXME - in listonly listings, remove nLifeMax/Min, nCopiesMax/Min from dict.
DONE - harden against missing env var for NUMBER_OF_PROCESSORS.  and then
    maybe remove the crap added to AWSinstall.
DONE - log all broker commands into some file.
FIXME - write a utility to reconstitute the main.py and broker.py command lines 
    from a result line in GiantOutput and from the dump in the log.  
DONE - put out the command line, or at least the arg list, as trace-0
    so that it gets recorded into a tee file.  
DONE - dump the instruction dictionary as trace-0 before or just after
    getting iterator from searchspace.  
FIXME - add a cleanstart shell script to empty the dirs that need to 
    be empty, set a clean GiantOutput file.
DONE - validate directories before doing anything else.
DONE - add serverdefaultlife to done-hash, to logfilename, and anywhere
    else that seems appropriate.  (REDUNDANT)
DONE - emptygiantoutput shell script should rescue any data
  that was left over in a previous GiantOutput file into
  the done dir.  
DONE - emptygiantoutput shell script should remove the old GiantOutput.txt 
    file completely, or maybe leave an empty file, so that datacleanup.py
    can put a correct header line on the file.  
DONE - increase the stuck timer a lot.
DUNNO - protect against grep failure, linux vs windows.
DONE - fix y/n switch options to get rid of the need for a value.
DONE - fix the broker invocation in the AWSinstallscript to match the
  revised y/n options.
DONE - start the run count from 1 even for cases that have already been done, 
  so that the run number reflects progress toward the total number, and print 
  the run number in the already-done line.  
DONE - add auditfreq and segs to the intro run-n lines.  
DONE - make familydir and specificdir required options (fun oxymoron).
DONE - add param for number of seeds and take the seeds from a separate 
  file of some specific name.  
DONE - break into several pieces to make editing easier.
DONE - adapt to new instruction generator.
DONE - adapt to new status bookkeeping database.  
DONE - fix option processing to permit presence-only options to pass thru, 
    e.g., --shortlog.
DONE - put out notice about TRACE_PRODUCTION mode, both in broker
    and in main.py.  must be in the log file.  
DONE - adapt the pretestchecklist and other scripts to the new instruction
    files, location, etc.  


TODO: broker docs
DONE - add -p option to mkdir so that user can use specificdir more 
    than one level deep, e.g., ../shocks/low/span1.
FIXME - warn the user in strong language always to setupfamilydir for their
    runs, which is a console activity.  hmmm, maybe that could be added
    as an option to the broker form, eh?  so they don't have to use any 
    nasty old CLI commands.  
FIXME - add an option to setupfamilydir.sh to clear the directories.
FIXME - add examples of obscure mongodb syntax in the --query command (and others?) 
  to howto broker doc.
FIXME - Add a help file about using mongoshell to examine database 
  of instructions, in case you think anything is funny about the database.  
  In particular, how to shut down MongoDB and how to repair it if it 
  complains that the lock file is not empty.  
FIXME - add a hint in broker docs that one can formulate 99% of the command
    with the form with listonly turned on, then cut and paste that command, 
    edit it a little to add more options, and then feed that to the shell.  
MAYBE - add a script to dump out some sample stats from a mongo db, such as names of
  all dbs, number of elements and varnames for each, like that.  


TODO: audit
FIXME - log stats at end of each audit cycle: lost, minority repairs, 
  majority repairs.  These are all cross-server figures.  We need to 
  add per-server figures, too.  Goal is to see if the user could 
  possibly detect server glitch less than fatal.  
DONE - log per-server total losses and hits at end of run.  
DUP - log stats at end of each audit cycle: lost, minority repairs, majority 
  repairs.  These are all cross-server figures; don't know if we need 
  per-server figures.
DONE - fix long-standing bug: when reprovision new server to replace dead one, 
  provision only with docs that have extant copies, not necessarily 
  the full set; some may already have been lost.  


ABANDON: newinstructions
DON'T - Add a squash function to reduce blank sequences to single blanks
  in flat files, in case someone created instructions in fixed columns.
DONE - write filter for instructions as they are being generated flat
  hierarchical: a field named action for permit/deny
DONE - write rules for the filter
  rules in a list of json dictionaries
  first rule is permit *, then list of denies maybe slightly countermanded
DONE - rewrite rules to filter lots more, particularly nonsense cases
  with glitch freq, impact, decay, and life.  
DONE - integrate filter into last stage of flat instruction 
  generation
DON'T - write documentation on how to generate instructions flat file 
  and database.  
DONE - fix order of args to filter program, data file last.
DONE - fix shell script that makes complete instruction list to
  reflect change in argument order.
DONE - Remove random seeds from the instruction db; add them in broker 
  based on a param that states how many seeds today; maybe an environment
  variable, even, or overridden by one.  Easy enough to add that single param
  and shorten the instruction Cartesian product by a factor of ten or twenty.  
  Important when we want to do samples of 100 or 1000.  
FIXME - move some of the utilities up to shelf or maybe to a util dir.  
DONE - remove the shelf/newinstructions directory.  
FIXME - document new procedure for generating instructions: simpler, just edit
    the shelf/instructions/*.ins files.  


TODO: packaging into Docker
DONE - do Docker basic tutorials
DONE - construct vm platforms for docker learning on both systems
DONE - transcribe crummy bash script to dockerfile.
FIXME - write docker shim to feed instructions from outside to inside.
FIXME - add shim to docker image
FIXME - use docker logs to watch progress of log files


TODO: Docker scheduling
FIXME - after container install, get sources from github
FIXME - after container install, run first simple test
FIXME - after container install, build tinytestdb
FIXME - after container install, start mongod
FIXME - after container install, run broker tests


TODO: AWS deployment
FIXME - always turn on brokercommandlog in startup.sh.
FIXME - turn the simple-minded tests at the end of deployment into real
    unit test modules so they are easier to maintain, add to, etc.  
DONE - create a broker command log file for the user, and warn the 
    user that it will grow and grow.  
DONE - be sure to export NUMBER_OF_PROCESSORS for broker to use in the 
    installed session.  broker should take care of this, too, just in case
    it is run from another session that does not have the env var.  
DONE - add broker test that runs and check the loss number.
DONE - change newinstructions section of script to create flat instructions 
  and database from the ins files pulled.  
DONE - change newinstructions section of script to be way simpler with
    newnewnewinstructions method of on-demand cross-product with no
    pre-stored instructions.
DONE - change broker cli for tests and examples.
DONE - deploy shelf on AWS free tier system.
DONE - automate deployment to AWS systems.
DONE - run shelf on free tier system.
DONE - get access to 8 core system.
DONE - deploy to 8 core system.
DONE - run shelf on 8 core system.
DONE - deploy to 32 core system c3.8xlarge.
DONE - run on 32 core system: how fast?
DONE - clean up and document the AWS-Ubuntu install script.
DONE - test docker deployment on 8 core system.
DONE - test docker deployment on 32 core system.
DONE - change newinstructions db to something smaller and more useful.


TODO: rationalize time constants so that people can understand them
FIXME - note that Rosenthal uses half-life in his article.
DONE - change main.py sector lifetime to half-life.
  (this will change ALL the existing numbers; recompute everything)
DONE - update the AWS install script single-run test for the new half-life 
  results.
DONE - change glitch frequency to half-life (oops, already is)
DONE - update the main.py CLI help to reflect half-life instead of lifetime.
DONE - update the main.py CLI to accept both --lifek and --lifem.  
DONE - update the broker.py CLI help to reflect half-life instead of lifetime.
FIXME - update other docs to reflect half-life instead of lifetime.  
WRONG - update main.py to accept either lifek or lifem but not both.
DONE - update main.py to accept both lifek and lifem, where lifek takes
  precedence because it is more accurate.  
DONE - BUG: fix main.py arg parsing to make all the positional params mandatory.  
  and bump the CLI version number.  
DONE - remove the requirement for a Y/N value from --shortlog.
FIXME - BUG: fix main.py default values in G so that it doesn't fail if there 
  are no param files in the familydir or specificdir; always fails for the list
  items, such as ncopies, I think because the list items in the dictionaries
  should be one level deeper.  
DONE - Update SERVERUSE log lines and some other lines, too, at end to state 
    half-life and exponential lifetime with few or no decimal places.

DONE - Update SERVERUSE log lines and some other lines, too, at end to state half-life and exponential lifetime with few or no decimal places.


TODO: calibration
FIXME - turn this into a formal, publishable table.  probably in md.  
DONE - do spreadsheet of a0 numbers compared with simple Poisson theoretical results.  
  Completed for samples of 21 and 101.  
DONE: do spreadsheet of a0 numbers compared with simple Poisson 
    theoretical results.  
DONE - test that shortlog and traceproduction do not affect the numbers.


TODO: log file reporting
DONE - Include in log file output error numbers for each server individually, hits, losses, redundant hits.  To be used someday to assess the distribution of increased losses due to glitches.  
FIXME - Add comments somewhere about the hits and losses numbers reported at the
  end of run include events *after* the last audit cycle completed, and therefore
  some of the numbers may not appear to add up quite, but they really do.  I checked. 
  Example: "ncopies=2 lifem=100 audit=20000 0 1" yields 
  nonemptyhits=758 but repairs=587; the difference is 171 missing nonempty hits.
  Well, there were 171 nonempty hits in the log after the last audit finished 
  at t=80026.  So there.  
DONE - QUESTION: the last audit cycle is always left open. Is this problem?  Some 
  arithmetic could cause it to be completed before the end of simulated time.  
  However, we used to have a random offset for the beginning of audits to prevent
  multiple clients from having synchronized audits and clogging the network.  
  However, now, there is only one client and therefore one audit, so the 
  random offset is no longer necessary.  The open, unaudited period
  at the end of the simulation would seem to add a touch of reality to it: 
  losses may occur at any time in the auditing cycle, and you never know when
  you will need access to a particular document.  And, btw, finishing the 
  last audit would not change the permanent losses at all.  


TODO: unittests
FIXME - fix the numbers in the current tests so they match what the new 
    new new instructions put out.  and find a way to fix this permanently.
FIXME - add a pile more unit tests, some small and some large.


TODO: R reporting
DONE - state tables both as loss numbers and as percentage losses of collection.


TODO: lifetimes: correlated institutional failures
DONE - at some interval, economic glitch dramatically increases the 
  institutional up to 100% failure rate for >= 1 server.
  Note trickiness: this is cross-server, needs access to several
  server instances at once.  see shock.
DONE - add external parameters to set number of servers affected,
  the decrease in institution lifetime, and the rate of economic
  recession/depression.  see shock.


ABANDON: newnewinstructions
ABANDON - custom flat db or maybe tiny or buzhug
ABANDON - facade or adapter: same interface as current mongolib
ABANDON - new load, list, and clear utilities that use flatlib
ABANDON - eventually, web app to generate smallish sets of instructions


DEFER: packaging
DONE - do Docker basic tutorials
DONE - construct vm platforms for docker learning on both systems
DEFER - transcribe crummy bash script to dockerfile


ABANDON: nonmonotonicity testing
ABANDON - do runs in the sensitive areas, limited to 3-4 lifetimes and few copies
ABANDON - runs with 100 or more seeds?
ABANDON - many runs with 20ish seeds to assess variability?
ABANDON - jacknife the existing numbers?


TODO: outline for September presentation
DONE - how long is it?
DONE - draft slide sequence
DONE - get approval of slide sequence
DONE - who is going to talk?
DONE - propose what pictures we need
DONE - get list of specific graphs to be done


TODO: runs for September presentation
DONE - what graphics needed?
DONE - what numbers to compute?


TODO: same for November presentation to iPRES at UNC
DONE - write slides for Micah to use, update from September's.


TODO: report to UltraEdit
BUG - Highlight All Selected (ctrl-.) does not work inside strings, and there
    is no option to turn that on.  there are similar options for, e.g., 
    brace matching and brace completion in strings.



#END
