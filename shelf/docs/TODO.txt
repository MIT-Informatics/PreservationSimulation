TODO list


TODO: extractvalues.py
DONE - add optional arg for --separator=','
DONE - default should still be space
DONE - if i use comma, then datacleanup can use DictReader.  not a big deal.
DONE - actually, Dialect.delimiter can be set to whatever i want.
DONE - maybe just use reader with delimiter=' ' and dict(zip()) 
   the header list and data list together.  
DONE - recode entirely to force filter first thing, to reduce the size
    of the internal lists required, and speed things up.  
    dramatic improvement.  


TODO: 100% glitch impact
DONE - shelf destroy all documents on shelf.
DONE - server inform client of shelf failure.
DONE - server refuse document additions to that shelf, 
  or maybe shelf just always answers that it's full.
WRONG - server probably should refuse to make a new shelf.  
DONE - client go shopping for another server to replace dead one.
WRONG - if duration is short, then server may recover before the
  client even notices; however, all documents still have been lost,
  so the next audit will find many dead docs.  


TODO: brokercommands
DONE - slow down after extractvalues, too.


TODO: broker.py
DONE - increase the stuck timer a lot.
- protect against grep failure, linux vs windows.
- add a cleanstart shell script to empty the dirs that need to 
  be empty, set a clean GiantOutput file, and rescue any data
  that was left over in a previous GiantOutput file into
  the done dir.  


TODO: newinstructions
- Add a squash function to reduce blank sequences to single blanks
  in flat files, in case someone created instructions in fixed columns.
DONE - write filter for instructions as they are being generated flat
  hierarchical: a field named action for permit/deny
DONE - write rules for the filter
  rules in a list of json dictionaries
  first rule is permit *, then list of denies maybe slightly countermanded
- rewrite rules to filter lots more, particularly nonsense cases
  with glitch freq, impact, decay, and life.  
DONE - integrate into last stage of flat instruction generation
- write documentation on how to generate instructions flat file 
  and database.  


TODO: newnewinstructions
- custom flat db or maybe tiny or buzhug
- facade or adapter: same interface as current mongolib
- new load, list, and clear utilities that use flatlib
- eventually, web app to generate smallish sets of instructions


TODO: packaging
DONE - do Docker basic tutorials
DONE - construct vm platforms for docker learning on both systems
DONE - transcribe crummy bash script to dockerfile.
- write docker shim to feed instructions from outside to inside.
- add shim to docker image
- use docker logs to watch progress of log files


TODO: Docker scheduling
- after container install, get sources from github
- after container install, run first simple test
- after container install, build tinytestdb
- after container install, start mongod
- after container install, run broker tests



TODO: AWS deployment
DONE - deploy shelf on AWS free tier system.
DONE - automate deployment to AWS systems.
DONE - run shelf on free tier system.
DONE - get access to 8 core system.
DONE - deploy to 8 core system.
DONE - run shelf on 8 core system.
DONE - deploy to 32 core system c3.8xlarge.
- run on 32 core system: how fast?
DONE - clean up and document the AWS-Ubuntu install script
- test docker deployment on 8 core system
- test docker deployment on 36 core system


TODO: nonmonotonicity testing
- find where the sensitive areas once were; seem to have lost them.
- do runs in the sensitive areas, limited to 3-4 lifetimes and few copies
- runs with 100 or more seeds?
- many runs with 20ish seeds to assess variability?
- jacknife the existing numbers?


TODO: outline for September presentation
DONE - how long is it?
DONE - draft slide sequence
DONE - get approval of slide sequence
DONE - who is going to talk?
DONE - propose what pictures we need
DONE - get list of specific graphs to be done

TODO: runs for September presentation
DONE - what graphics needed?
DONE - what numbers to compute?

TODO: same for November presentation to iPRES at UNC
DONE - write slides for Micah to use, update from September's


TODO: rationalize time constants so that people can understand them
DONE - change sector lifetime to half-life.
  (this will change ALL the existing numbers; recompute everything)
- update the AWS install script single-run test for the new half-life 
  results.
DONE - change glitch frequency to half-life (oops, already is)ce2
- update the main.py CLI help to reflect half-life instead of lifetime.
- update the main.py CLI to accept both --lifek and --lifem.  
- update the broker.py CLI help to reflect half-life instead of lifetime.
- update other docs to reflect half-life instead of lifetime.  


TODO: lifetimes: correlated institutional failures
- at some interval, economic glitch dramatically increases the 
  institutional 100% failure rate for >= 1 server.
  Note trickiness: this is cross-server, needs access to several
  server instances at once.
- add external parameters to set number of servers affected,
  the decrease in institution lifetime, and the rate of economic
  recession/depression.  


TODO: web interface to select instructions for broker run
- learn kivy and remi, decide which to use.
- build static web interface to permit choosing instructions for 
  a single run, or subset instructions for group run.
- build backend for interface that generates broker.py command.



