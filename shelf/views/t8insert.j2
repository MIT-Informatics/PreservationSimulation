<!-- t8insert.j2 test file -->
{% extends "./t8base.html" %}

{# Macro to insert 2x1 table element for var, 
    top for heading, bottom for values. #}
{% macro insertmyvar(data) %}    
    <td>
        <table>
            <tr><td>
                <b>{{data.heading}}</b>
            </td></tr>
            <tr><td>
                <select name="{{data.varname}}">
    {% for item in data.lValueList %}
                <option value="{{ item.value }}"{% if item.selected != '0' %} selected{%endif%}>&nbsp;&nbsp;{{item.label}}&nbsp;</option>
    {% endfor %}
                </select>
            </td></tr>
        </table>
    </td>
{% endmacro %}

{% block CHILD -%}
{% for varname1, vardict1 in dVars.iteritems() %}
    {% set varname = varname1 %}
    {% set vardict = vardict1 %}
    {% set data = vardict1 %}
    {% if varname == "nCopies" %}  
        {% block nCopies scoped %}
           {{insertmyvar(vardict)}}
        {% endblock %}
    {% elif varname == "nAuditFreq" %}
        {% block nAuditFreq scoped %}
            {{insertmyvar(vardict)}}
        {% endblock %}
    {% else %} ERROR: Unknown variable name {{varname}}
    {% endif %}
{% endfor %}
{%- endblock CHILD%}

{%block ignoreme1%}
-----------------------------
master

table structure just for placement, no var content

tr
block name1
block name2
block name3
/tr
five trs
22 tds

child

huge child block containing 
    block name1
        content, trs, tds, substitutions
    block name2
        similar content but different vars
    22 of these

each block called with a different dict containing name, head, list

this requires a factory, i think

for eachstuff in full context
    get eachstuff.name
    if name == something
        define the block for that name

    if name == name1
        block name1
    elif name == name2
        block name2
    etc.
    else
        skip unknown varname

this repeated stuff inside each block is where the macro is handy.

{%endblock%}
